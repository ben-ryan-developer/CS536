
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Sat Nov 23 18:40:06 CST 2013
//----------------------------------------------------

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 5},     {14, 2},     {14, 1},     {7, 2}, 
        {7, 0},     {15, 2},     {15, 0},     {10, 1},     {10, 0}, 
        {16, 9},     {16, 10},     {16, 9},     {16, 10},     {17, 3}, 
        {17, 1},     {18, 2},     {18, 4},     {8, 3},     {8, 5}, 
        {8, 6},     {8, 5},     {2, 2},     {2, 0},     {3, 5}, 
        {3, 7},     {3, 5},     {3, 7},     {3, 4},     {3, 3}, 
        {3, 3},     {3, 5},     {3, 5},     {3, 4},     {3, 5}, 
        {3, 2},     {3, 3},     {3, 3},     {3, 3},     {3, 5}, 
        {9, 1},     {9, 1},     {9, 1},     {22, 3},     {22, 1}, 
        {20, 3},     {20, 1},     {21, 3},     {21, 1},     {4, 3}, 
        {4, 3},     {4, 1},     {26, 3},     {26, 3},     {26, 3}, 
        {26, 3},     {26, 3},     {26, 3},     {26, 1},     {23, 3}, 
        {23, 3},     {23, 1},     {24, 3},     {24, 3},     {24, 1}, 
        {25, 2},     {25, 4},     {25, 1},     {5, 1},     {5, 3}, 
        {5, 4},     {5, 1},     {5, 1},     {5, 1},     {5, 1}, 
        {5, 1},     {5, 3},     {19, 1},     {19, 4},     {6, 1}, 
        {11, 1},     {12, 1},     {13, 1}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{6,3,-1,0},
    /*1*/{0,200,-1,0},
    /*2*/{2,4,-1,0},
    /*3*/{7,-80,8,-80,9,-80,10,-80,11,-80,13,-80,16,-80,20,-80,21,-80,23,-80,24,-80,25,-80,27,-80,29,-80,30,-80,32,-80,33,-80,34,-80,36,-80,37,-80,43,-80,45,-80,46,-80,-1,0},
    /*4*/{30,6,-1,0},
    /*5*/{12,8,15,7,19,14,22,16,31,-8,38,11,-1,0},
    /*6*/{2,-43,24,-43,-1,0},
    /*7*/{2,4,-1,0},
    /*8*/{15,7,19,14,22,16,31,-8,38,11,-1,0},
    /*9*/{31,192,-1,0},
    /*10*/{2,-42,24,-42,-1,0},
    /*11*/{12,8,15,7,19,14,22,16,31,-8,38,11,-1,0},
    /*12*/{31,-4,-1,0},
    /*13*/{2,4,-1,0},
    /*14*/{2,4,-1,0},
    /*15*/{2,-41,24,-41,-1,0},
    /*16*/{7,18,9,20,23,19,34,21,-1,0},
    /*17*/{2,-19,12,-19,14,-19,15,-19,17,-19,18,-19,19,-19,22,-19,30,-19,31,-19,38,-19,39,-19,41,-19,42,-19,44,-19,-1,0},
    /*18*/{15,7,22,16,24,85,38,11,-1,0},
    /*19*/{3,30,-1,0},
    /*20*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*21*/{7,-73,8,-73,10,-73,11,-73,13,-73,16,-73,20,-73,21,-73,24,-73,25,-73,27,-73,29,-73,32,-73,33,-73,36,-73,37,-73,-1,0},
    /*22*/{7,-76,8,-76,10,-76,11,-76,13,-76,16,-76,20,-76,21,-76,24,-76,25,-76,27,-76,29,-76,32,-76,33,-76,36,-76,37,-76,-1,0},
    /*23*/{7,-83,8,-83,10,-83,11,-83,13,-83,16,-83,20,-83,21,-83,24,-83,25,-83,27,-83,29,-83,32,-83,33,-83,36,-83,37,-83,-1,0},
    /*24*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*25*/{7,-82,8,-82,10,-82,11,-82,13,-82,16,-82,20,-82,21,-82,24,-82,25,-82,27,-82,29,-82,32,-82,33,-82,36,-82,37,-82,-1,0},
    /*26*/{7,79,8,65,11,63,-1,0},
    /*27*/{2,4,3,30,4,24,5,26,15,7,22,16,23,28,26,23,35,38,38,11,40,25,-1,0},
    /*28*/{7,-65,8,-65,10,-65,11,-65,13,-65,16,-65,20,-65,21,-65,24,-65,25,-65,27,-65,29,-65,32,-65,33,-65,36,-65,37,-65,-1,0},
    /*29*/{7,-81,8,-81,10,-81,11,-81,13,-81,16,-81,20,-81,21,-81,24,-81,25,-81,27,-81,29,-81,32,-81,33,-81,36,-81,37,-81,-1,0},
    /*30*/{7,-78,8,-78,9,61,10,-78,11,-78,13,-78,16,-78,20,-78,21,-78,23,60,24,-78,25,-78,27,-78,29,-78,32,-78,33,-78,36,-78,37,-78,-1,0},
    /*31*/{7,-62,8,-62,10,-62,11,-62,13,-62,16,-62,20,50,21,-62,24,-62,25,-62,27,49,29,-62,32,-62,33,-62,36,-62,37,-62,-1,0},
    /*32*/{7,-68,8,-68,10,-68,11,-68,13,-68,16,-68,20,-68,21,-68,24,-68,25,-68,27,-68,29,-68,32,-68,33,-68,36,-68,37,-68,-1,0},
    /*33*/{7,-72,8,-72,10,-72,11,-72,13,-72,16,-72,20,-72,21,-72,24,-72,25,-72,27,-72,29,-72,32,-72,33,-72,36,-72,37,-72,-1,0},
    /*34*/{7,-74,8,-74,10,-74,11,-74,13,-74,16,-74,20,-74,21,-74,24,-74,25,-74,27,-74,29,-74,32,-74,33,-74,36,-74,37,-74,-1,0},
    /*35*/{7,-59,8,-59,10,42,11,-59,13,40,16,47,21,-59,24,-59,25,43,29,44,32,45,33,46,36,-59,37,41,-1,0},
    /*36*/{7,-52,8,-52,11,-52,21,-52,24,-52,36,-52,-1,0},
    /*37*/{7,-75,8,-75,10,-75,11,-75,13,-75,16,-75,20,-75,21,-75,24,-75,25,-75,27,-75,29,-75,32,-75,33,-75,36,-75,37,-75,-1,0},
    /*38*/{7,-69,8,-69,10,-69,11,-69,13,-69,16,-69,20,-69,21,-69,24,-69,25,-69,27,-69,29,-69,32,-69,33,-69,36,-69,37,-69,-1,0},
    /*39*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*40*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*41*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*42*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*43*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*44*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*45*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*46*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*47*/{7,-61,8,-61,10,-61,11,-61,13,-61,16,-61,20,50,21,-61,24,-61,25,-61,27,49,29,-61,32,-61,33,-61,36,-61,37,-61,-1,0},
    /*48*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*49*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*50*/{7,-63,8,-63,10,-63,11,-63,13,-63,16,-63,20,-63,21,-63,24,-63,25,-63,27,-63,29,-63,32,-63,33,-63,36,-63,37,-63,-1,0},
    /*51*/{7,-64,8,-64,10,-64,11,-64,13,-64,16,-64,20,-64,21,-64,24,-64,25,-64,27,-64,29,-64,32,-64,33,-64,36,-64,37,-64,-1,0},
    /*52*/{7,-58,8,-58,11,-58,16,47,21,-58,24,-58,29,44,36,-58,-1,0},
    /*53*/{7,-56,8,-56,11,-56,16,47,21,-56,24,-56,29,44,36,-56,-1,0},
    /*54*/{7,-60,8,-60,10,-60,11,-60,13,-60,16,-60,20,50,21,-60,24,-60,25,-60,27,49,29,-60,32,-60,33,-60,36,-60,37,-60,-1,0},
    /*55*/{7,-55,8,-55,11,-55,16,47,21,-55,24,-55,29,44,36,-55,-1,0},
    /*56*/{7,-53,8,-53,11,-53,16,47,21,-53,24,-53,29,44,36,-53,-1,0},
    /*57*/{7,-57,8,-57,11,-57,16,47,21,-57,24,-57,29,44,36,-57,-1,0},
    /*58*/{7,-54,8,-54,11,-54,16,47,21,-54,24,-54,29,44,36,-54,-1,0},
    /*59*/{2,4,3,30,4,24,5,26,23,28,24,69,26,23,35,38,40,25,-1,0},
    /*60*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*61*/{8,65,11,63,36,64,-1,0},
    /*62*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*63*/{7,-79,8,-79,10,-79,11,-79,13,-79,16,-79,20,-79,21,-79,24,-79,25,-79,27,-79,29,-79,32,-79,33,-79,34,-79,36,-79,37,-79,45,-79,46,-79,-1,0},
    /*64*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*65*/{7,-50,8,-50,11,-50,21,-50,24,-50,36,-50,-1,0},
    /*66*/{7,-51,8,-51,11,-51,21,-51,24,-51,36,-51,-1,0},
    /*67*/{24,73,-1,0},
    /*68*/{7,-70,8,-70,10,-70,11,-70,13,-70,16,-70,20,-70,21,-70,24,-70,25,-70,27,-70,29,-70,32,-70,33,-70,36,-70,37,-70,-1,0},
    /*69*/{8,65,11,63,21,71,24,-45,-1,0},
    /*70*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*71*/{24,-44,-1,0},
    /*72*/{7,-71,8,-71,10,-71,11,-71,13,-71,16,-71,20,-71,21,-71,24,-71,25,-71,27,-71,29,-71,32,-71,33,-71,36,-71,37,-71,-1,0},
    /*73*/{24,77,-1,0},
    /*74*/{8,65,11,63,24,76,-1,0},
    /*75*/{7,-77,8,-77,10,-77,11,-77,13,-77,16,-77,20,-77,21,-77,24,-77,25,-77,27,-77,29,-77,32,-77,33,-77,36,-77,37,-77,-1,0},
    /*76*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*77*/{7,-67,8,-67,10,-67,11,-67,13,-67,16,-67,20,-67,21,-67,24,-67,25,-67,27,-67,29,-67,32,-67,33,-67,36,-67,37,-67,-1,0},
    /*78*/{2,-20,12,-20,14,-20,15,-20,17,-20,18,-20,19,-20,22,-20,30,-20,31,-20,38,-20,39,-20,41,-20,42,-20,44,-20,-1,0},
    /*79*/{7,-66,8,-66,10,-66,11,-66,13,-66,16,-66,20,-66,21,-66,24,-66,25,-66,27,-66,29,-66,32,-66,33,-66,36,-66,37,-66,-1,0},
    /*80*/{36,82,-1,0},
    /*81*/{7,83,-1,0},
    /*82*/{2,-21,12,-21,14,-21,15,-21,17,-21,18,-21,19,-21,22,-21,30,-21,31,-21,38,-21,39,-21,41,-21,42,-21,44,-21,-1,0},
    /*83*/{21,174,24,-16,-1,0},
    /*84*/{30,169,-1,0},
    /*85*/{2,4,-1,0},
    /*86*/{24,88,-1,0},
    /*87*/{30,89,-1,0},
    /*88*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*89*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*90*/{2,4,-1,0},
    /*91*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*92*/{2,4,-1,0},
    /*93*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*94*/{23,150,-1,0},
    /*95*/{34,145,45,144,46,143,-1,0},
    /*96*/{31,140,-1,0},
    /*97*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*98*/{23,133,-1,0},
    /*99*/{2,4,3,30,4,24,5,26,7,130,23,28,26,23,35,38,40,25,-1,0},
    /*100*/{9,61,23,119,34,-78,43,118,45,-78,46,-78,-1,0},
    /*101*/{23,114,-1,0},
    /*102*/{23,107,-1,0},
    /*103*/{2,4,-1,0},
    /*104*/{7,106,-1,0},
    /*105*/{2,-39,14,-39,17,-39,18,-39,28,-39,30,-39,31,-39,39,-39,41,-39,42,-39,44,-39,-1,0},
    /*106*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*107*/{8,65,11,63,21,112,24,-49,-1,0},
    /*108*/{24,110,-1,0},
    /*109*/{7,111,-1,0},
    /*110*/{2,-33,14,-33,17,-33,18,-33,28,-33,30,-33,31,-33,39,-33,41,-33,42,-33,44,-33,-1,0},
    /*111*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*112*/{24,-48,-1,0},
    /*113*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*114*/{8,65,11,63,24,116,-1,0},
    /*115*/{2,4,14,102,17,100,18,95,30,94,39,99,41,93,42,104,44,103,-1,0},
    /*116*/{2,-27,14,-27,17,-27,18,-27,28,-27,30,-27,31,-27,39,-27,41,-27,42,-27,44,-27,-1,0},
    /*117*/{14,125,-1,0},
    /*118*/{2,4,3,30,4,24,5,26,23,28,24,121,26,23,35,38,40,25,-1,0},
    /*119*/{24,123,-1,0},
    /*120*/{7,122,-1,0},
    /*121*/{2,-34,14,-34,17,-34,18,-34,28,-34,30,-34,31,-34,39,-34,41,-34,42,-34,44,-34,-1,0},
    /*122*/{7,124,-1,0},
    /*123*/{2,-35,14,-35,17,-35,18,-35,28,-35,30,-35,31,-35,39,-35,41,-35,42,-35,44,-35,-1,0},
    /*124*/{23,126,-1,0},
    /*125*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*126*/{8,65,11,63,24,128,-1,0},
    /*127*/{2,4,14,102,17,100,18,95,30,94,39,99,41,93,42,104,44,103,-1,0},
    /*128*/{2,-28,14,-28,17,-28,18,-28,28,-28,30,-28,31,-28,39,-28,41,-28,42,-28,44,-28,-1,0},
    /*129*/{2,-36,14,-36,17,-36,18,-36,28,-36,30,-36,31,-36,39,-36,41,-36,42,-36,44,-36,-1,0},
    /*130*/{7,132,8,65,11,63,-1,0},
    /*131*/{2,-37,14,-37,17,-37,18,-37,28,-37,30,-37,31,-37,39,-37,41,-37,42,-37,44,-37,-1,0},
    /*132*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*133*/{8,65,11,63,24,135,-1,0},
    /*134*/{2,4,14,102,17,100,18,95,30,94,39,99,41,93,42,104,44,103,-1,0},
    /*135*/{2,-25,14,-25,17,-25,18,-25,28,137,30,-25,31,-25,39,-25,41,-25,42,-25,44,-25,-1,0},
    /*136*/{2,4,14,102,17,100,18,95,30,94,39,99,41,93,42,104,44,103,-1,0},
    /*137*/{2,-26,14,-26,17,-26,18,-26,28,-26,30,-26,31,-26,39,-26,41,-26,42,-26,44,-26,-1,0},
    /*138*/{31,-23,-1,0},
    /*139*/{7,142,15,-10,19,-10,22,-10,31,-10,38,-10,-1,0},
    /*140*/{15,-14,19,-14,22,-14,31,-14,38,-14,-1,0},
    /*141*/{2,-9,14,-9,15,-9,17,-9,18,-9,19,-9,22,-9,28,-9,30,-9,31,-9,38,-9,39,-9,41,-9,42,-9,44,-9,-1,0},
    /*142*/{7,149,-1,0},
    /*143*/{7,148,-1,0},
    /*144*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*145*/{7,147,8,65,11,63,-1,0},
    /*146*/{2,-29,14,-29,17,-29,18,-29,28,-29,30,-29,31,-29,39,-29,41,-29,42,-29,44,-29,-1,0},
    /*147*/{2,-30,14,-30,17,-30,18,-30,28,-30,30,-30,31,-30,39,-30,41,-30,42,-30,44,-30,-1,0},
    /*148*/{2,-31,14,-31,17,-31,18,-31,28,-31,30,-31,31,-31,39,-31,41,-31,42,-31,44,-31,-1,0},
    /*149*/{2,4,-1,0},
    /*150*/{21,156,24,-47,-1,0},
    /*151*/{24,154,-1,0},
    /*152*/{9,61,21,-78,24,-78,-1,0},
    /*153*/{7,155,-1,0},
    /*154*/{2,-32,14,-32,17,-32,18,-32,28,-32,30,-32,31,-32,39,-32,41,-32,42,-32,44,-32,-1,0},
    /*155*/{2,4,-1,0},
    /*156*/{24,-46,-1,0},
    /*157*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*158*/{31,160,-1,0},
    /*159*/{2,-10,7,142,14,-10,17,-10,18,-10,28,-10,30,-10,31,-10,39,-10,41,-10,42,-10,44,-10,-1,0},
    /*160*/{2,-40,14,-40,17,-40,18,-40,28,-40,30,-40,31,-40,39,-40,41,-40,42,-40,44,-40,-1,0},
    /*161*/{7,163,-1,0},
    /*162*/{2,-38,14,-38,17,-38,18,-38,28,-38,30,-38,31,-38,39,-38,41,-38,42,-38,44,-38,-1,0},
    /*163*/{7,18,9,20,34,21,-1,0},
    /*164*/{2,-5,14,-5,17,-5,18,-5,30,-5,31,-5,39,-5,41,-5,42,-5,44,-5,-1,0},
    /*165*/{9,167,21,-17,24,-17,-1,0},
    /*166*/{36,168,-1,0},
    /*167*/{21,-18,24,-18,-1,0},
    /*168*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*169*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*170*/{31,172,-1,0},
    /*171*/{7,142,15,-10,19,-10,22,-10,31,-10,38,-10,-1,0},
    /*172*/{15,-13,19,-13,22,-13,31,-13,38,-13,-1,0},
    /*173*/{15,7,22,16,38,11,-1,0},
    /*174*/{24,-15,-1,0},
    /*175*/{23,177,-1,0},
    /*176*/{15,7,22,16,24,178,38,11,-1,0},
    /*177*/{30,186,-1,0},
    /*178*/{24,180,-1,0},
    /*179*/{30,181,-1,0},
    /*180*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*181*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*182*/{31,184,-1,0},
    /*183*/{7,142,15,-10,19,-10,22,-10,31,-10,38,-10,-1,0},
    /*184*/{15,-12,19,-12,22,-12,31,-12,38,-12,-1,0},
    /*185*/{2,-6,12,8,14,-6,15,7,17,-6,18,-6,22,16,30,-6,31,-6,38,11,39,-6,41,-6,42,-6,44,-6,-1,0},
    /*186*/{2,4,14,102,17,100,18,95,30,94,31,-24,39,99,41,93,42,104,44,103,-1,0},
    /*187*/{31,189,-1,0},
    /*188*/{7,142,15,-10,19,-10,22,-10,31,-10,38,-10,-1,0},
    /*189*/{15,-11,19,-11,22,-11,31,-11,38,-11,-1,0},
    /*190*/{31,-3,-1,0},
    /*191*/{0,-2,-1,0},
    /*192*/{31,-7,-1,0},
    /*193*/{2,4,-1,0},
    /*194*/{23,19,-1,0},
    /*195*/{34,197,-1,0},
    /*196*/{2,4,3,30,4,24,5,26,23,28,26,23,35,38,40,25,-1,0},
    /*197*/{7,199,8,65,11,63,-1,0},
    /*198*/{2,-22,12,-22,14,-22,15,-22,17,-22,18,-22,19,-22,22,-22,30,-22,31,-22,38,-22,39,-22,41,-22,42,-22,44,-22,-1,0},
    /*199*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,1,-1,-1},
    /*1*/{-1,-1},
    /*2*/{6,4,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{8,11,9,14,14,9,15,12,16,8,-1,-1},
    /*6*/{-1,-1},
    /*7*/{6,195,-1,-1},
    /*8*/{9,193,15,192,16,8,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{8,11,9,14,14,190,15,12,16,8,-1,-1},
    /*12*/{-1,-1},
    /*13*/{6,175,-1,-1},
    /*14*/{6,16,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{9,85,17,86,18,83,-1,-1},
    /*19*/{11,80,-1,-1},
    /*20*/{4,26,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{5,32,6,30,11,33,12,21,13,34,19,38,25,79,-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{4,74,5,32,6,30,9,73,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{5,32,6,30,11,33,12,21,13,34,19,38,23,58,24,31,25,28,-1,-1},
    /*40*/{5,32,6,30,11,33,12,21,13,34,19,38,23,57,24,31,25,28,-1,-1},
    /*41*/{5,32,6,30,11,33,12,21,13,34,19,38,23,56,24,31,25,28,-1,-1},
    /*42*/{5,32,6,30,11,33,12,21,13,34,19,38,23,55,24,31,25,28,-1,-1},
    /*43*/{5,32,6,30,11,33,12,21,13,34,19,38,24,54,25,28,-1,-1},
    /*44*/{5,32,6,30,11,33,12,21,13,34,19,38,23,53,24,31,25,28,-1,-1},
    /*45*/{5,32,6,30,11,33,12,21,13,34,19,38,23,52,24,31,25,28,-1,-1},
    /*46*/{5,32,6,30,11,33,12,21,13,34,19,38,24,47,25,28,-1,-1},
    /*47*/{-1,-1},
    /*48*/{5,32,6,30,11,33,12,21,13,34,19,38,25,51,-1,-1},
    /*49*/{5,32,6,30,11,33,12,21,13,34,19,38,25,50,-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{4,69,5,32,6,30,11,33,12,21,13,34,19,38,22,67,23,35,24,31,25,28,26,36,-1,-1},
    /*60*/{4,61,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*61*/{-1,-1},
    /*62*/{5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,66,-1,-1},
    /*63*/{-1,-1},
    /*64*/{5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,65,-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{4,69,5,32,6,30,11,33,12,21,13,34,19,38,22,71,23,35,24,31,25,28,26,36,-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{5,32,6,30,11,33,12,21,13,34,19,38,25,77,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{6,165,-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{7,91,8,89,9,90,-1,-1},
    /*89*/{7,164,8,89,9,90,-1,-1},
    /*90*/{6,163,-1,-1},
    /*91*/{2,96,3,97,6,100,19,95,-1,-1},
    /*92*/{6,161,-1,-1},
    /*93*/{7,157,8,89,9,90,-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{2,138,3,97,6,100,19,95,-1,-1},
    /*98*/{-1,-1},
    /*99*/{4,130,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{6,104,-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{4,107,5,32,6,30,11,33,12,21,13,34,19,38,21,108,23,35,24,31,25,28,26,36,-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{4,107,5,32,6,30,11,33,12,21,13,34,19,38,21,112,23,35,24,31,25,28,26,36,-1,-1},
    /*112*/{-1,-1},
    /*113*/{4,114,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*114*/{-1,-1},
    /*115*/{3,116,6,100,19,95,-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{4,69,5,32,6,30,11,33,12,21,13,34,19,38,22,119,23,35,24,31,25,28,26,36,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{4,126,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*126*/{-1,-1},
    /*127*/{3,128,6,100,19,95,-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{4,133,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*133*/{-1,-1},
    /*134*/{3,135,6,100,19,95,-1,-1},
    /*135*/{-1,-1},
    /*136*/{3,137,6,100,19,95,-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{10,140,-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{4,145,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{6,152,19,150,20,151,-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{6,152,19,150,20,156,-1,-1},
    /*156*/{-1,-1},
    /*157*/{2,158,3,97,6,100,19,95,-1,-1},
    /*158*/{-1,-1},
    /*159*/{10,160,-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{7,169,8,89,9,90,-1,-1},
    /*169*/{2,170,3,97,6,100,19,95,-1,-1},
    /*170*/{-1,-1},
    /*171*/{10,172,-1,-1},
    /*172*/{-1,-1},
    /*173*/{9,85,17,174,18,83,-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{9,85,17,178,18,83,-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{7,181,8,89,9,90,-1,-1},
    /*181*/{2,182,3,97,6,100,19,95,-1,-1},
    /*182*/{-1,-1},
    /*183*/{10,184,-1,-1},
    /*184*/{-1,-1},
    /*185*/{7,186,8,89,9,90,-1,-1},
    /*186*/{2,187,3,97,6,100,19,95,-1,-1},
    /*187*/{-1,-1},
    /*188*/{10,189,-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{-1,-1},
    /*192*/{-1,-1},
    /*193*/{6,194,-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{4,197,5,32,6,30,11,33,12,21,13,34,19,38,23,35,24,31,25,28,26,36,-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


	public void syntax_error(Symbol cur_token) {
		if(cur_token.value instanceof CSXIdentifierToken) {
    		report_error("CSX syntax error at line "+ String.valueOf(((CSXToken)cur_token.value).linenum)+ ", COL: " + String.valueOf(((CSXToken)cur_token.value).colnum) + " Identifier: " + ((CSXIdentifierToken)cur_token.value).identifierText,null);
    	} else if(cur_token.value instanceof CSXIntLitToken) {
      		report_error("CSX syntax error at line "+ String.valueOf(((CSXToken)cur_token.value).linenum)+ ", COL: " + String.valueOf(((CSXToken)cur_token.value).colnum) + " InyLit: " + ((CSXIntLitToken)cur_token.value).intValue,null);
    	} else if(cur_token.value instanceof CSXCharLitToken) {
      		report_error("CSX syntax error at line "+ String.valueOf(((CSXToken)cur_token.value).linenum)+ ", COL: " + String.valueOf(((CSXToken)cur_token.value).colnum) + " CharLit: " + ((CSXCharLitToken)cur_token.value).charValue,null);
    	} else if(cur_token.value instanceof CSXStringLitToken) {
      		report_error("CSX syntax error at line "+ String.valueOf(((CSXToken)cur_token.value).linenum)+ ", COL: " + String.valueOf(((CSXToken)cur_token.value).colnum) + " StringLit: " + ((CSXStringLitToken)cur_token.value).stringText,null);
    	} else {
 	  		report_error("CSX syntax error at LINE "+String.valueOf(((CSXToken)cur_token.value).linenum) + ", COL: " + String.valueOf(((CSXToken)cur_token.value).colnum), null);
    	}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {

  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // strliteral ::= STRLIT 
            {
              strLitNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXStringLitToken i = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = new strLitNode(i.stringText, i.linenum,i.colnum);

              CUP$result = new java_cup.runtime.Symbol(13/*strliteral*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // charliteral ::= CHARLIT 
            {
              charLitNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXCharLitToken i = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = new charLitNode(i.charValue, i.linenum,i.colnum);

              CUP$result = new java_cup.runtime.Symbol(12/*charliteral*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // intliteral ::= INTLIT 
            {
              intLitNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = new intLitNode(i.intValue, i.linenum,i.colnum);

              CUP$result = new java_cup.runtime.Symbol(11/*intliteral*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = new identNode(i.identifierText, i.linenum,i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(6/*ident*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // name ::= ident LBRACKET exp RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new nameNode(i, e, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(19/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = new nameNode(i, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(19/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unit ::= LPAREN exp RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= e; 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new falseNode(b.linenum, b.colnum); 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new trueNode(b.linenum, b.colnum); 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= strliteral 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		strLitNode i = (strLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= i; 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= charliteral 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		charLitNode i = (charLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= i; 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= intliteral 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		intLitNode i = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= i; 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new fctCallNode(i, a, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new fctCallNode(i, argsNodeOption.NULL, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=n; 

              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=u; 

              CUP$result = new java_cup.runtime.Symbol(25/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new castNode(t, u, l.linenum, l.colnum); 

              CUP$result = new java_cup.runtime.Symbol(25/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new unaryOpNode(sym.NOT, u, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(25/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=u; 

              CUP$result = new java_cup.runtime.Symbol(24/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(p, sym.SLASH, u, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(24/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(p, sym.TIMES, u, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(24/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = p; 

              CUP$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f, sym.MINUS, p, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f, sym.PLUS, p, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=f1; 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.NOTEQ, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.EQ, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.LEQ, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.GEQ, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.LT, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f1 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f2 = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new binaryOpNode(f1, sym.GT, f2, op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(26/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT = t; 

              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp CAND term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=new binaryOpNode(leftval,sym.CAND,rightval,op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp COR term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT=new binaryOpNode(leftval,sym.COR,rightval,op.linenum, op.colnum); 

              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printlist ::= exp 
            {
              printNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
			
	RESULT= new printNode(e, printNodeOption.NULL, e.linenum, e.colnum); 

              CUP$result = new java_cup.runtime.Symbol(21/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printlist ::= exp COMMA printlist 
            {
              printNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		printNodeOption p = (printNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
			
	RESULT= new printNode(e, p, e.linenum, e.colnum); 

              CUP$result = new java_cup.runtime.Symbol(21/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // readlist ::= name 
            {
              readNodeOption RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
			
	RESULT= new readNode(n, readNodeOption.NULL, n.linenum, n.colnum); 

              CUP$result = new java_cup.runtime.Symbol(20/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // readlist ::= name COMMA readlist 
            {
              readNodeOption RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		readNodeOption r = (readNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new readNode(n, r, n.linenum, n.colnum); 

              CUP$result = new java_cup.runtime.Symbol(20/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= exp 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new argsNode(e, argsNodeOption.NULL, e.linenum, e.colnum); 

              CUP$result = new java_cup.runtime.Symbol(22/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= exp COMMA args 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new argsNode(e, a, e.linenum, e.colnum); 

              CUP$result = new java_cup.runtime.Symbol(22/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
    RESULT=new charTypeNode(t.linenum, t.colnum);

              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	RESULT=new boolTypeNode(t.linenum, t.colnum);

              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	RESULT= new intTypeNode(t.linenum, t.colnum);

              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new blockNode(f, s, l.linenum, l.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new continueNode(i, c.linenum, c.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new breakNode(i, b.linenum, b.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_RETURN exp SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new returnNode(e, r.linenum, r.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new returnNode(exprNodeOption.NULL, r.linenum, r.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new callNode(i, a, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		 
	RESULT= new callNode(i, argsNodeOption.NULL, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= rw_PRINT LPAREN printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		printNodeOption plst = (printNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT=plst; 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rlstleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rlstright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		readNodeOption rlst = (readNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT=rlst; 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= name DECREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new decrementNode(n, n.linenum, n.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= name INCREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new incrementNode(n, n.linenum, n.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= name ASG exp SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new asgNode(n, e, n.linenum, n.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ident COLON rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new whileNode(i, e, s, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new whileNode(exprNodeOption.NULL, e, s, w.linenum, w.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= rw_IF LPAREN exp RPAREN stmt rw_ELSE stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s2 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new ifThenNode(e, s1, s2, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_IF LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new ifThenNode(e, s, i.linenum, i.colnum); 

              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= 
            {
              stmtsOption RESULT = null;
		 
	RESULT= stmtsOption.NULL; 

              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt stmts 
            {
              stmtsOption RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtsOption s2 = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new stmtsNode(s1, s2, s1.linenum, s1.colnum);

              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fielddecl ::= rw_CONST ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new constDeclNode(i, e, c.linenum, c.colnum); 

              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fielddecl ::= type ident LBRACKET intliteral RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		intLitNode size = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new arrayDeclNode(i, t, size, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= type ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new varDeclNode(i, t, e, t.linenum, t.colnum);

              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new varDeclNode(i, t, exprNode.NULL, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new arrayArgDeclNode(i, t, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(18/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new valArgDeclNode(i, t, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(18/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argdecls ::= argdecl 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new argDeclsNode(a, argDeclsOption.NULL, a.linenum, a.colnum); 

              CUP$result = new java_cup.runtime.Symbol(17/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclsOption as = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new argDeclsNode(a, as, a.linenum, a.colnum); 

              CUP$result = new java_cup.runtime.Symbol(17/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new methodDeclNode(i, a, t, f, s, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(16/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new methodDeclNode(i, argDeclsOption.NULL, t, f, s, t.linenum, t.colnum); 

              CUP$result = new java_cup.runtime.Symbol(16/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new methodDeclNode(i, a, new voidTypeNode(v.linenum, v.colnum), f, s, v.linenum, v.colnum); 

              CUP$result = new java_cup.runtime.Symbol(16/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 
	RESULT= new methodDeclNode(i, argDeclsOption.NULL, new voidTypeNode(v.linenum, v.colnum), f, s, v.linenum, v.colnum); 

              CUP$result = new java_cup.runtime.Symbol(16/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalSemi ::= 
            {
              Symbol RESULT = null;
		 
              CUP$result = new java_cup.runtime.Symbol(10/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalSemi ::= SEMI 
            {
              Symbol RESULT = null;
		 
              CUP$result = new java_cup.runtime.Symbol(10/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              methodDeclsOption RESULT = null;
		 
	RESULT= methodDeclsOption.NULL; 

              CUP$result = new java_cup.runtime.Symbol(15/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsOption RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		methodDeclNode m = (methodDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption ms = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new methodDeclsNode(m, ms, m.linenum, m.colnum); 

              CUP$result = new java_cup.runtime.Symbol(15/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              fieldDeclsOption RESULT = null;
		 
	RESULT= fieldDeclsOption.NULL; 

              CUP$result = new java_cup.runtime.Symbol(7/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsOption RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f1 = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		fieldDeclsOption f2 = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new fieldDeclsNode(f1,f2, f1.linenum, f1.colnum); 

              CUP$result = new java_cup.runtime.Symbol(7/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption me = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 
	RESULT= new memberDeclsNode(fieldDeclsOption.NULL, me, me.linenum, me.colnum); 

              CUP$result = new java_cup.runtime.Symbol(14/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		  
	fieldDeclsNode fs = new fieldDeclsNode(f, m.fields, f.linenum, f.colnum);
	m.fields = fs;
	RESULT = m; 

              CUP$result = new java_cup.runtime.Symbol(14/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 
	RESULT= new classNode(i, m, c.linenum, c.colnum); 

              CUP$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

